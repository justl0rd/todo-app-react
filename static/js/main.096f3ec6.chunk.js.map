{"version":3,"sources":["components/Header.js","components/NewToDo.js","components/ToDoItem.js","components/ToDoList.js","components/Footer.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","NewToDo","state","currentTask","text","taskHandler","_ref","target","tasksLength","_this","props","setState","status","value","id","concat","Date","now","keyPressHandler","e","addTask","key","preventDefault","this","changeStatusToAllTasks","type","onClick","name","placeholder","onKeyPress","onChange","Component","ToDoItem","editing","edtingTaskText","editingHandler","_this$props","updateEditedTasks","taskId","handleClickOutside","classList","contains","closeEdit","_ref2","showDefaultTask","_this$props2","task","statusHandler","removeTask","taskClassName","onDoubleClick","showEditingTask","_ref3","ref","input","focus","document","addEventListener","removeEventListener","React","ToDoList","tasks","showMode","tasksToShow","filter","toLowerCase","map","idx","ToDoItem_ToDoItem","sortButtons","Footer","modeHandler","items","removeTasks","isAreAnyCompleted","itemsInfo","button","buttonName","App","push","newTasks","setDataToLocalStorage","_this$state","localStorage","setItem","JSON","stringify","some","forEach","activeTasks","newText","find","getActiveItems","length","parse","getItem","prevProps","prevState","_this$state2","activeItemsCount","components_Header","NewToDo_NewToDo","components_ToDoList","components_Footer","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.096f3ec6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header-head\">todos</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\n","import React, { Component } from 'react';\r\n\r\nexport default class NewToDo extends Component {\r\n    state = {\r\n      currentTask: {\r\n        text: '',\r\n      },\r\n    }\r\n\r\n    taskHandler = ({ target }) => {\r\n      const { tasksLength } = this.props;\r\n\r\n      this.setState({\r\n        currentTask: {\r\n          status: 'active',\r\n          text: target.value,\r\n          id: `${tasksLength}${Date.now()}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    keyPressHandler = (e) => {\r\n      const { addTask } = this.props;\r\n      const { currentTask } = this.state;\r\n      const { key } = e;\r\n\r\n      if (key === 'Enter') {\r\n        e.preventDefault();\r\n        addTask(currentTask);\r\n        this.setState({\r\n          currentTask: {\r\n            status: 'active',\r\n            text: '',\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const { currentTask } = this.state;\r\n      const { text } = currentTask;\r\n      const { tasksLength } = this.props;\r\n      const { changeStatusToAllTasks } = this.props;\r\n\r\n      return (\r\n        <div className=\"new-todo\">\r\n          <form>\r\n            {!!tasksLength\r\n                    && (\r\n                    <label className=\"new-todo__label new-todo__label_button\">\r\n                      <input\r\n                        className=\"new-todo__item new-todo__item_button\"\r\n                        type=\"button\"\r\n                        value=\"\"\r\n                        onClick={changeStatusToAllTasks}\r\n                      />\r\n                    </label>\r\n                    )\r\n                    }\r\n            <label className={`new-todo__label ${!tasksLength && 'empty-list'}`}>\r\n              <input\r\n                className=\"new-todo__item new-todo__item_input\"\r\n                type=\"text\"\r\n                name=\"todo\"\r\n                placeholder=\"What needs to be done?\"\r\n                onKeyPress={this.keyPressHandler}\r\n                onChange={this.taskHandler}\r\n                value={text}\r\n              />\r\n            </label>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ToDoItem extends React.Component {\r\n    state = {\r\n      editing: false,\r\n      edtingTaskText: '',\r\n    }\r\n\r\n    componentWillMount() {\r\n      const { task } = this.props;\r\n      const { text: edtingTaskText } = task;\r\n\r\n      document.addEventListener('click', this.handleClickOutside);\r\n      this.setState({ edtingTaskText });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      document.removeEventListener('click', this.handleClickOutside);\r\n    }\r\n\r\n    editingHandler = () => {\r\n      const { editing } = this.state;\r\n\r\n      this.setState({ editing: !editing });\r\n      if (editing) {\r\n        const { updateEditedTasks, taskId } = this.props;\r\n        const { edtingTaskText } = this.state;\r\n\r\n        updateEditedTasks(edtingTaskText, taskId);\r\n      }\r\n    };\r\n\r\n    handleClickOutside = ({ target }) => {\r\n      const { editing } = this.state;\r\n\r\n      if (editing && !target.classList.contains('todo-item__editing')) {\r\n        this.editingHandler();\r\n      }\r\n    }\r\n\r\n    closeEdit = ({ key }) => (key === 'Enter') && this.editingHandler();\r\n\r\n    showDefaultTask = () => {\r\n      const {\r\n        task, taskId, statusHandler, removeTask,\r\n      } = this.props;\r\n      const { status, text } = task;\r\n      const taskClassName = (status === 'active') ? 'todo-list__task-text' : 'todo-list__task-text todo-list__task-text--completed';\r\n\r\n      return (\r\n        <div className=\"todo-list__content\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"todo-list__checkbox\"\r\n            onClick={() => statusHandler(taskId)}\r\n          />\r\n          <label className={taskClassName}>\r\n            <span onDoubleClick={this.editingHandler}>{text}</span>\r\n          </label>\r\n          <button\r\n            type=\"button\"\r\n            className=\"remove\"\r\n            onClick={() => removeTask(taskId)}\r\n          >\n\r\n\r\n×\r\n          </button>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    showEditingTask = () => (\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"todo-item__editing\"\r\n          onChange={({ target }) => this.setState({ edtingTaskText: target.value })}\r\n          onKeyPress={this.closeEdit}\r\n          value={this.state.edtingTaskText}\r\n          ref={input => input && input.focus()}\r\n        />\r\n      </label>\r\n    );\r\n\r\n    render() {\r\n      const { editing } = this.state;\r\n\r\n      return (\r\n        <li className=\"todo-list__item\">\r\n          {!editing ? this.showDefaultTask() : this.showEditingTask()}\r\n        </li>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = (props) => {\r\n  const {\n    tasks, removeTask, statusHandler, showMode, updateEditedTasks,\n  } = props;\r\n  const tasksToShow = showMode === 'all' ? tasks : tasks.filter(task => task.status.toLowerCase() === showMode);\r\n\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {tasksToShow.map((task, idx) => (\r\n\r\n        <ToDoItem\r\n          task={task}\r\n          key={`${idx}${task.text}`}\r\n          taskId={task.id}\r\n          removeTask={removeTask}\r\n          statusHandler={statusHandler}\r\n          updateEditedTasks={updateEditedTasks}\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\n","import React from 'react';\r\n\r\nconst sortButtons = ['All', 'Active', 'Completed'];\r\n\r\nconst Footer = ({\r\n  modeHandler,\r\n  showMode,\r\n  items,\r\n  removeTasks,\r\n  isAreAnyCompleted,\r\n}) => {\r\n  const getClassName = buttonName => (\r\n    (buttonName.toLowerCase() === showMode)\r\n      ? 'todo__filter-item selected'\r\n      : 'todo__filter-item'\r\n  );\r\n\r\n  const itemsInfo = ((items === 1) && `${items} item left`) || `${items} items left`;\r\n\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo__count\">{itemsInfo}</span>\r\n      <ul className=\"todo__filters\">\r\n        {sortButtons.map((button, key) => (\r\n          <li\r\n            key={`${button}${key}`}\r\n            className={getClassName(button)}\r\n            onClick={() => modeHandler(button.toLowerCase())}\r\n          >\r\n            {button}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {isAreAnyCompleted\r\n                && <span className=\"clear-button\" onClick={removeTasks}>Clear completed</span>\r\n            }\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport NewToDo from './components/NewToDo';\r\nimport ToDoList from './components/ToDoList';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    tasks: [],\r\n    showMode: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\r\n    const showMode = localStorage.getItem('showMode');\r\n    if (tasks) {\r\n      this.setState({ tasks, showMode });\r\n    }\r\n    if (!showMode) {\r\n      this.setState({ showMode: 'all' });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState !== this.state) {\r\n      this.setDataToLocalStorage();\r\n    }\r\n  }\r\n\r\n  addTask = (task) => {\r\n    const { tasks } = this.state;\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  removeTask = (taskId) => {\r\n    const { tasks } = this.state;\r\n    const newTasks = tasks.filter(task => task.id !== taskId);\r\n\r\n\r\n    this.setState({\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  statusHandler = (taskId) => {\r\n    const { tasks } = this.state;\r\n    const newTasks = tasks.map((task) => {\r\n      if (taskId === task.id) {\r\n        task.status = (task.status === 'completed') ? 'active' : 'completed';\r\n      }\r\n      return task;\r\n    });\r\n\r\n    this.setState({\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  modeHandler = showMode => this.setState({ showMode });\r\n\r\n  setDataToLocalStorage = () => {\r\n    const { tasks, showMode } = this.state;\r\n\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    localStorage.setItem('showMode', showMode);\r\n  };\r\n\r\n  changeStatusToAllTasks = () => {\r\n    const { tasks } = this.state;\r\n    const isActive = tasks.some(task => task.status === 'active');\r\n\r\n    if (isActive) {\r\n      tasks.forEach(task => ((task.status = 'completed'), task));\r\n    } else {\r\n      tasks.forEach(task => ((task.status = 'active'), task));\r\n    }\r\n\r\n    this.setState({ tasks });\r\n  }\r\n\r\n  removeTasks = () => {\r\n    const { tasks } = this.state;\r\n    const activeTasks = tasks.filter(task => task.status !== 'completed');\r\n\r\n    this.setState({\r\n      tasks: activeTasks,\r\n    });\r\n  }\r\n\r\n  updateEditedTasks = (newText, id) => {\r\n    const { tasks } = this.state;\r\n    tasks.find(task => task.id === id).text = newText;\r\n\r\n    this.setState({ tasks });\r\n  }\r\n\r\n  getActiveItems = () => {\r\n    const { tasks } = this.state;\r\n    return (tasks.length) ? tasks.filter(task => task.status === 'active') : [];\r\n  };\r\n\r\n  render() {\r\n    const { tasks, showMode } = this.state;\r\n    const activeItems = this.getActiveItems();\r\n    const activeItemsCount = activeItems.length;\r\n    const isAreAnyCompleted = tasks.some(task => task.status === 'completed');\r\n    const tasksLength = tasks.length;\r\n\r\n    return (\r\n      <section className=\"todo-app\">\r\n        <Header />\r\n        <section className=\"main\">\r\n          <NewToDo\r\n            addTask={this.addTask}\r\n            tasksLength={tasksLength}\r\n            changeStatusToAllTasks={this.changeStatusToAllTasks}\r\n          />\r\n          {tasks\r\n          && (\r\n          <ToDoList\r\n            tasks={tasks}\r\n            removeTask={this.removeTask}\r\n            statusHandler={this.statusHandler}\r\n            showMode={showMode}\r\n            updateEditedTasks={this.updateEditedTasks}\r\n          />\r\n          )\r\n          }\r\n        </section>\r\n        {(!!activeItemsCount || !!tasksLength)\r\n        && (\r\n        <Footer\r\n          modeHandler={this.modeHandler}\r\n          showMode={showMode}\r\n          items={activeItemsCount}\r\n          removeTasks={this.removeTasks}\r\n          isAreAnyCompleted={isAreAnyCompleted}\r\n        />\r\n        )\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}