{"version":3,"sources":["components/Header.js","components/NewToDo.js","components/ToDoItem.js","components/ToDoList.js","components/Footer.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","NewToDo","state","currentTask","text","taskHandler","_ref","target","tasksLength","_this","props","setState","status","value","id","keyPressHandler","e","addTask","key","preventDefault","this","type","onClick","markHandler","concat","name","placeholder","onKeyPress","onChange","Component","ToDoItem","task","removeTask","taskId","statusHandler","taskClassName","ToDoList","tasks","showMode","tasksToShow","filter","toLowerCase","map","idx","components_ToDoItem","sortButtons","Footer","modeHandler","items","removeTasks","isAreAnyCompleted","itemsInfo","button","buttonName","App","push","newTasks","localStorageHandler","_this$state","localStorage","setItem","JSON","stringify","some","forEach","parse","getItem","prevProps","prevState","_this$state2","activeItemsCount","length","components_Header","NewToDo_NewToDo","components_ToDoList","components_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2c8e1ac0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header-head\">todos</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nexport default class NewToDo extends Component {\r\n    state = {\r\n        currentTask: {\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    taskHandler = ({target}) => {\r\n        const {tasksLength} = this.props;\r\n\r\n        this.setState({\r\n            currentTask: {\r\n                status: 'active',\r\n                text: target.value,\r\n                id: tasksLength\r\n            }\r\n        })\r\n    }\r\n\r\n    keyPressHandler = e => {\r\n        const {addTask} = this.props,\r\n            {currentTask} = this.state,\r\n            {key} = e;  \r\n\r\n        if (key === 'Enter') {\r\n            e.preventDefault();\r\n            addTask(currentTask);\r\n            this.setState({\r\n                currentTask: {\r\n                    status: 'active',\r\n                    text: ''\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {text} = this.state.currentTask,\r\n            {tasksLength} = this.props;\r\n\r\n        return (\r\n            <div className=\"new-todo\">\r\n                <form>\r\n                    {!!tasksLength &&\r\n                    <label className=\"new-todo__label new-todo__label_button\">\r\n                        <input\r\n                            className=\"new-todo__item new-todo__item_button\"\r\n                            type=\"button\"\r\n                            value=\"\"\r\n                            onClick={this.props.markHandler}\r\n                        />\r\n                    </label>\r\n                    }\r\n                    <label className={`new-todo__label ${!tasksLength && 'empty-list'}`}>\r\n                        <input \r\n                            className=\"new-todo__item new-todo__item_input\"\r\n                            type=\"text\"\r\n                            name=\"todo\"\r\n                            placeholder=\"What needs to be done?\"\r\n                            onKeyPress={this.keyPressHandler}\r\n                            onChange={this.taskHandler}\r\n                            value={text}\r\n                        />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\n\r\nconst ToDoItem = ({\r\n                task,\r\n                removeTask,\r\n                taskId,\r\n                statusHandler\r\n            }) => {\r\n\r\n    const {status, text} = task,\r\n        taskClassName = (status === 'active') ? 'todo-list__task-text' : 'todo-list__task-text todo-list__task-text--completed';\r\n    \r\n    return(\r\n    <li className=\"todo-list__item\">\r\n        <div className=\"todo-list__content\">\r\n            <input \r\n                type=\"checkbox\"\r\n                className=\"todo-list__checkbox\"\r\n                onClick={() => statusHandler(taskId)}\r\n            />\r\n            <label className={taskClassName}>{text}</label>\r\n            <button \r\n                className=\"remove\"\r\n                onClick={() => removeTask(taskId)}\r\n            >Ã—</button>\r\n        </div>\r\n    </li>\r\n    )\r\n};\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = props => {\r\n    const {tasks, removeTask, statusHandler, showMode} = props,\r\n        tasksToShow = showMode === 'all' ? tasks : tasks.filter(task => task.status.toLowerCase() === showMode);\r\n\r\n    return(\r\n        <ul className=\"todo-list\">\r\n            {tasksToShow.map((task, idx) => (\r\n\r\n                <ToDoItem \r\n                    task={task} \r\n                    key={`${idx}${task}`}\r\n                    taskId={task.id}\r\n                    removeTask={removeTask}\r\n                    statusHandler={statusHandler}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import React from 'react';\r\n\r\nconst sortButtons = ['All', 'Active', 'Completed'];\r\n\r\nconst Footer = ({\r\n                modeHandler,\r\n                showMode,\r\n                items,\r\n                removeTasks,\r\n                isAreAnyCompleted\r\n            }) => {\r\n\r\n    const getClassName = buttonName => (\r\n        (buttonName.toLowerCase() === showMode)\r\n                    ? \r\n                    'todo__filter-item selected'\r\n                    : \r\n                    'todo__filter-item'\r\n    );\r\n\r\n    const itemsInfo = ((items === 1) && `${items} item left`) || `${items} items left`;\r\n    \r\n    \r\n    return(\r\n        <footer className=\"footer\">\r\n            <span className=\"todo__count\">{itemsInfo}</span>\r\n            <ul className=\"todo__filters\">\r\n                {sortButtons.map((button, key) => (\r\n                    <li \r\n                        key={`${button}${key}`}\r\n                        className={getClassName(button)}\r\n                        onClick={() => modeHandler(button.toLowerCase())}\r\n                    >\r\n                        {button}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {isAreAnyCompleted &&\r\n                <span className=\"clear-button\" onClick={removeTasks}>Clear completed</span>\r\n            }\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport NewToDo from './components/NewToDo';\nimport ToDoList from './components/ToDoList';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  \n  state = {\n    tasks: [],\n    showMode: 'all'\n  }\n\n  componentDidMount() {\n    const tasks = JSON.parse(localStorage.getItem('tasks')),\n    showMode = localStorage.getItem('showMode');\n    \n    this.setState({ tasks, showMode });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.localStorageHandler();\n    }\n  }\n\n  addTask = task => {\n    const {tasks} = this.state;\n    tasks.push(task);\n    \n    this.setState({ tasks });\n  };\n\n  removeTask = taskId => {\n    const {tasks} = this.state,\n      newTasks = tasks.filter(task => task.id !== taskId);\n    \n    \n    this.setState({\n      tasks: newTasks\n    });\n  };\n\n  statusHandler = taskId => {\n    const {tasks} = this.state,\n      newTasks = tasks.map(task => {\n\n      if (taskId === task.id) {\n        (task.status === 'completed') ? task.status = 'active': task.status = 'completed';\n      }\n\n      return task;\n    });\n\n    this.setState({\n      tasks: newTasks\n    });\n  };\n\n  modeHandler = showMode => this.setState({ showMode });\n\n  localStorageHandler = () => {\n    const {tasks, showMode} = this.state;\n\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('showMode', showMode);\n  };\n\n  markHandler = () => {\n    const {tasks} = this.state,\n      isActive = tasks.some(task => task.status === 'active');\n\n    if (isActive) {\n      tasks.forEach(task => ((task.status = 'completed'), task));\n    }\n    else {\n      tasks.forEach(task => ((task.status = 'active'), task));\n    }\n\n    this.setState({tasks});\n  }\n\n  removeTasks = () => {\n    const {tasks} = this.state;\n\n    this.setState({\n      tasks: tasks.filter(task => task.status !== 'completed')\n    });\n  }\n\n  render() {\n    const {tasks, showMode} = this.state,\n      activeItemsCount = tasks.filter(task => task.status === 'active').length,\n      isAreAnyCompleted = tasks.some(task => task.status === 'completed'),\n      tasksLength = tasks.length;\n\n    return (\n      <section className=\"todo-app\">\n        <Header />\n        <section className=\"main\">\n          <NewToDo\n            addTask={this.addTask}\n            tasksLength={tasksLength}\n            markHandler={this.markHandler}\n          />\n          <ToDoList\n            tasks={tasks}\n            removeTask={this.removeTask}\n            statusHandler={this.statusHandler}\n            showMode={showMode}\n          />\n        </section>\n        {(!!activeItemsCount || !!tasksLength) && \n        <Footer \n          modeHandler={this.modeHandler}\n          showMode={showMode}\n          items={activeItemsCount}\n          removeTasks={this.removeTasks}\n          isAreAnyCompleted={isAreAnyCompleted}\n        />\n        }\n      </section>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}