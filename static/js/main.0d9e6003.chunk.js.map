{"version":3,"sources":["components/Header.js","components/NewToDo.js","components/ToDoItem.js","components/ToDoList.js","components/Footer.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","NewToDo","state","currentTask","text","taskHandler","_ref","target","tasksLength","_this","props","setState","status","value","id","keyPressHandler","e","addTask","key","preventDefault","this","type","onClick","markHandler","concat","name","placeholder","onKeyPress","onChange","Component","ToDoItem","task","removeTask","taskId","statusHandler","editTask","taskClassName","onDoubleClick","ToDoList","tasks","showMode","tasksToShow","updateTasks","filter","toLowerCase","console","log","map","idx","components_ToDoItem","sortButtons","Footer","modeHandler","items","removeTasks","isAreAnyCompleted","itemsInfo","button","buttonName","App","push","newTasks","localStorageHandler","_this$state","localStorage","setItem","JSON","stringify","some","forEach","activeTasks","getActiveItems","length","parse","getItem","prevProps","prevState","_this$state2","activeItems","activeItemsCount","components_Header","NewToDo_NewToDo","components_ToDoList","components_Footer","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.0d9e6003.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header-head\">todos</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nexport default class NewToDo extends Component {\r\n    state = {\r\n        currentTask: {\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    taskHandler = ({target}) => {\r\n        const {tasksLength} = this.props;\r\n\r\n        this.setState({\r\n            currentTask: {\r\n                status: 'active',\r\n                text: target.value,\r\n                id: tasksLength\r\n            }\r\n        })\r\n    }\r\n\r\n    keyPressHandler = e => {\r\n        const {addTask} = this.props,\r\n            {currentTask} = this.state,\r\n            {key} = e;  \r\n\r\n        if (key === 'Enter') {\r\n            e.preventDefault();\r\n            addTask(currentTask);\r\n            this.setState({\r\n                currentTask: {\r\n                    status: 'active',\r\n                    text: ''\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {text} = this.state.currentTask,\r\n            {tasksLength} = this.props;\r\n\r\n        return (\r\n            <div className=\"new-todo\">\r\n                <form>\r\n                    {!!tasksLength &&\r\n                    <label className=\"new-todo__label new-todo__label_button\">\r\n                        <input\r\n                            className=\"new-todo__item new-todo__item_button\"\r\n                            type=\"button\"\r\n                            value=\"\"\r\n                            onClick={this.props.markHandler}\r\n                        />\r\n                    </label>\r\n                    }\r\n                    <label className={`new-todo__label ${!tasksLength && 'empty-list'}`}>\r\n                        <input \r\n                            className=\"new-todo__item new-todo__item_input\"\r\n                            type=\"text\"\r\n                            name=\"todo\"\r\n                            placeholder=\"What needs to be done?\"\r\n                            onKeyPress={this.keyPressHandler}\r\n                            onChange={this.taskHandler}\r\n                            value={text}\r\n                        />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React from 'react';\r\n\r\nconst ToDoItem = ({\r\n                task,\r\n                removeTask,\r\n                taskId,\r\n                statusHandler,\r\n                editTask\r\n            }) => {\r\n\r\n    const {status, text} = task,\r\n        taskClassName = (status === 'active') ? 'todo-list__task-text' : 'todo-list__task-text todo-list__task-text--completed';\r\n    \r\n    return(\r\n    <li \r\n        className=\"todo-list__item\"\r\n        onDoubleClick={() => {\r\n            editTask(task, taskId);\r\n        }}\r\n    >\r\n        <div className=\"todo-list__content\">\r\n            <input \r\n                type=\"checkbox\"\r\n                className=\"todo-list__checkbox\"\r\n                onClick={() => statusHandler(taskId)}\r\n            />\r\n            <label className={taskClassName}>{text}</label>\r\n            <button \r\n                className=\"remove\"\r\n                onClick={() => removeTask(taskId)}\r\n            >Ã—</button>\r\n        </div>\r\n    </li>\r\n    )\r\n};\r\n\r\nexport default ToDoItem;","import React from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = props => {\r\n    const {tasks, removeTask, statusHandler, showMode, updateTasks} = props,\r\n        tasksToShow = showMode === 'all' ? tasks : tasks.filter(task => task.status.toLowerCase() === showMode);\r\n\r\n\r\n    const editTask = (task, id) => {\r\n        console.log(task, id);\r\n        // updateTasks\r\n        return (\r\n            <div>qq</div>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <ul className=\"todo-list\">\r\n            {tasksToShow.map((task, idx) => (\r\n\r\n                <ToDoItem \r\n                    task={task} \r\n                    key={`${idx}${task}`}\r\n                    taskId={task.id}\r\n                    removeTask={removeTask}\r\n                    statusHandler={statusHandler}\r\n                    editTask={editTask}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default ToDoList;","import React from 'react';\r\n\r\nconst sortButtons = ['All', 'Active', 'Completed'];\r\n\r\nconst Footer = ({\r\n                modeHandler,\r\n                showMode,\r\n                items,\r\n                removeTasks,\r\n                isAreAnyCompleted\r\n            }) => {\r\n\r\n    const getClassName = buttonName => (\r\n        (buttonName.toLowerCase() === showMode)\r\n                    ? \r\n                    'todo__filter-item selected'\r\n                    : \r\n                    'todo__filter-item'\r\n    );\r\n\r\n    const itemsInfo = ((items === 1) && `${items} item left`) || `${items} items left`;\r\n    \r\n    \r\n    return(\r\n        <footer className=\"footer\">\r\n            <span className=\"todo__count\">{itemsInfo}</span>\r\n            <ul className=\"todo__filters\">\r\n                {sortButtons.map((button, key) => (\r\n                    <li \r\n                        key={`${button}${key}`}\r\n                        className={getClassName(button)}\r\n                        onClick={() => modeHandler(button.toLowerCase())}\r\n                    >\r\n                        {button}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {isAreAnyCompleted &&\r\n                <span className=\"clear-button\" onClick={removeTasks}>Clear completed</span>\r\n            }\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport NewToDo from './components/NewToDo';\nimport ToDoList from './components/ToDoList';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  \n  state = {\n    tasks: [],\n    showMode: 'all'\n  }\n\n  componentDidMount() {\n    const tasks = JSON.parse(localStorage.getItem('tasks')),\n    showMode = localStorage.getItem('showMode');\n    if (tasks) {\n      this.setState({ tasks, showMode });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.localStorageHandler();\n    }\n  }\n\n  addTask = task => {\n    const {tasks} = this.state;\n    tasks.push(task);\n    \n    this.setState({ tasks });\n  };\n\n  removeTask = taskId => {\n    const {tasks} = this.state,\n      newTasks = tasks.filter(task => task.id !== taskId);\n    \n    \n    this.setState({\n      tasks: newTasks\n    });\n  };\n\n  statusHandler = taskId => {\n    const {tasks} = this.state,\n      newTasks = tasks.map(task => {\n\n      if (taskId === task.id) {\n        (task.status === 'completed') ? task.status = 'active': task.status = 'completed';\n      }\n\n      return task;\n    });\n\n    this.setState({\n      tasks: newTasks\n    });\n  };\n\n  modeHandler = showMode => this.setState({ showMode });\n\n  localStorageHandler = () => {\n    const {tasks, showMode} = this.state;\n\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('showMode', showMode);\n  };\n\n  markHandler = () => {\n    const {tasks} = this.state,\n      isActive = tasks.some(task => task.status === 'active');\n\n    if (isActive) {\n      tasks.forEach(task => ((task.status = 'completed'), task));\n    }\n    else {\n      tasks.forEach(task => ((task.status = 'active'), task));\n    }\n\n    this.setState({tasks});\n  }\n\n  removeTasks = () => {\n    const {tasks} = this.state,\n      activeTasks = tasks.filter(task => task.status !== 'completed');\n\n    this.setState({\n      tasks: activeTasks\n    });\n  }\n\n  updateTasks = tasks => this.setState({ tasks });\n\n  getActiveItems = () => {\n    const {tasks} = this.state;\n    if (tasks.length) {\n      return tasks.filter(task => task.status === 'active');\n    }\n    return [];\n  };\n\n  render() {\n    const {tasks, showMode} = this.state,\n      activeItems = this.getActiveItems(),\n      activeItemsCount = (activeItems && activeItems.length) || 0,\n      isAreAnyCompleted =(tasks && tasks.some(task => task.status === 'completed')) || false,\n      tasksLength = (tasks && tasks.length) || 0;\n    \n    return (\n      <section className=\"todo-app\">\n        <Header />\n        <section className=\"main\">\n          <NewToDo\n            addTask={this.addTask}\n            tasksLength={tasksLength}\n            markHandler={this.markHandler}\n          />\n          {tasks &&\n          <ToDoList\n            tasks={tasks}\n            removeTask={this.removeTask}\n            statusHandler={this.statusHandler}\n            showMode={showMode}\n            updateTasks={this.updateTasks}\n          />\n          }\n        </section>\n        {(!!activeItemsCount || !!tasksLength) && \n        <Footer \n          modeHandler={this.modeHandler}\n          showMode={showMode}\n          items={activeItemsCount}\n          removeTasks={this.removeTasks}\n          isAreAnyCompleted={isAreAnyCompleted}\n        />\n        }\n      </section>\n    );\n  };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}