{"version":3,"sources":["components/Header.js","components/NewToDo.js","components/ToDoItem.js","components/ToDoList.js","components/Footer.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","NewToDo","state","currentTask","text","taskHandler","_ref","target","tasksLength","_this","props","setState","status","value","id","concat","Date","now","keyPressHandler","e","addTask","key","preventDefault","this","_this$props","changeStatusToAllTasks","pointerClassName","allTasksIsCompleted","onMouseDown","type","onClick","name","placeholder","onKeyPress","onChange","Component","ToDoItem","editing","edtingTaskText","editingHandler","updateEditedTasks","taskId","handleClickOutside","classList","contains","closeEdit","_ref2","showDefaultTask","_this$props2","task","statusHandler","removeTask","taskClassName","onDoubleClick","showEditingTask","_ref3","ref","input","focus","document","addEventListener","removeEventListener","React","ToDoList","tasks","showMode","tasksToShow","filter","toLowerCase","map","idx","ToDoItem_ToDoItem","sortButtons","Footer","modeHandler","items","removeTasks","isAreAnyCompleted","itemsInfo","button","buttonName","App","setDataToLocalStorage","_this$state","appData","localStorage","setItem","JSON","stringify","push","newTasks","_this$state2","some","forEach","activeTasks","newText","find","getActiveItems","length","getItem","_JSON$parse","parse","prevProps","prevState","_this$state3","activeItemsCount","components_Header","NewToDo_NewToDo","components_ToDoList","components_Footer","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.19f93e87.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header-head\">todos</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class NewToDo extends Component {\r\n    state = {\r\n      currentTask: {\r\n        text: '',\r\n      },\r\n    }\r\n\r\n    taskHandler = ({ target }) => {\r\n      const { tasksLength } = this.props;\r\n\r\n      this.setState({\r\n        currentTask: {\r\n          status: 'active',\r\n          text: target.value,\r\n          id: `${tasksLength}${Date.now()}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    keyPressHandler = (e) => {\r\n      const { addTask } = this.props;\r\n      const { currentTask } = this.state;\r\n      const { key } = e;\r\n\r\n      if (key === 'Enter') {\r\n        e.preventDefault();\r\n        addTask(currentTask);\r\n        this.setState({\r\n          currentTask: {\r\n            status: 'active',\r\n            text: '',\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const { currentTask } = this.state;\r\n      const { text } = currentTask;\r\n      const { tasksLength } = this.props;\r\n      const { changeStatusToAllTasks, allTasksIsCompleted } = this.props;\r\n      const pointerClassName = !allTasksIsCompleted ? 'pointer-wrapper' : 'pointer-wrapper pointer-wrapper--checked';\r\n\r\n      return (\r\n        <div className=\"new-todo\">\r\n          <form>\r\n            {!!tasksLength\r\n                    && (\r\n                    <label \r\n                      className={pointerClassName}\r\n                      onMouseDown={e => e.preventDefault()}\r\n                      >\r\n                      <input\r\n                        className=\"new-todo__item\"\r\n                        type=\"button\"\r\n                        value=\"\"\r\n                        onClick={changeStatusToAllTasks}\r\n                      />\r\n                    </label>\r\n                    )\r\n                    }\r\n            <label className={`new-todo__label ${!tasksLength && 'empty-list'}`}>\r\n              <input\r\n                className=\"new-todo__item new-todo__item_input\"\r\n                type=\"text\"\r\n                name=\"todo\"\r\n                placeholder=\"What needs to be done?\"\r\n                onKeyPress={this.keyPressHandler}\r\n                onChange={this.taskHandler}\r\n                value={text}\r\n              />\r\n            </label>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class ToDoItem extends React.Component {\r\n    state = {\r\n      editing: false,\r\n      edtingTaskText: '',\r\n    }\r\n\r\n    componentWillMount() {\r\n      const { task } = this.props;\r\n      const { text: edtingTaskText } = task;\r\n\r\n      document.addEventListener('click', this.handleClickOutside);\r\n      this.setState({ edtingTaskText });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      document.removeEventListener('click', this.handleClickOutside);\r\n    }\r\n\r\n    editingHandler = () => {\r\n      const { editing } = this.state;\r\n\r\n      this.setState({ editing: !editing });\r\n      if (editing) {\r\n        const { updateEditedTasks, taskId } = this.props;\r\n        const { edtingTaskText } = this.state;\r\n\r\n        updateEditedTasks(edtingTaskText, taskId);\r\n      }\r\n    };\r\n\r\n    handleClickOutside = ({ target }) => {\r\n      const { editing } = this.state;\r\n\r\n      if (editing && !target.classList.contains('todo-item__editing')) {\r\n        this.editingHandler();\r\n      }\r\n    }\r\n\r\n    closeEdit = ({ key }) => (key === 'Enter') && this.editingHandler();\r\n\r\n    showDefaultTask = () => {\r\n      const {\r\n        task, taskId, statusHandler, removeTask,\r\n      } = this.props;\r\n      const { status, text } = task;\r\n      const taskClassName = (status === 'active') ? 'todo-list__task-text' : 'todo-list__task-text todo-list__task-text--completed';\r\n\r\n      return (\r\n        <div className=\"todo-list__content\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"todo-list__checkbox\"\r\n            onClick={() => statusHandler(taskId)}\r\n          />\r\n          <label className={taskClassName}>\r\n            <span onDoubleClick={this.editingHandler}>{text}</span>\r\n          </label>\r\n          <button\r\n            type=\"button\"\r\n            className=\"remove\"\r\n            onClick={() => removeTask(taskId)}\r\n          >\r\n\r\n\r\n×\r\n          </button>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    showEditingTask = () => (\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"todo-item__editing\"\r\n          onChange={({ target }) => this.setState({ edtingTaskText: target.value })}\r\n          onKeyPress={this.closeEdit}\r\n          value={this.state.edtingTaskText}\r\n          ref={input => input && input.focus()}\r\n        />\r\n      </label>\r\n    );\r\n\r\n    render() {\r\n      const { editing } = this.state;\r\n\r\n      return (\r\n        <li className=\"todo-list__item\">\r\n          {!editing ? this.showDefaultTask() : this.showEditingTask()}\r\n        </li>\r\n      );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nconst ToDoList = (props) => {\r\n  const {\r\n    tasks, removeTask, statusHandler, showMode, updateEditedTasks,\r\n  } = props;\r\n  const tasksToShow = showMode === 'all' ? tasks : tasks.filter(task => task.status.toLowerCase() === showMode);\r\n\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {tasksToShow.map((task, idx) => (\r\n\r\n        <ToDoItem\r\n          task={task}\r\n          key={`${idx}${task.text}`}\r\n          taskId={task.id}\r\n          removeTask={removeTask}\r\n          statusHandler={statusHandler}\r\n          updateEditedTasks={updateEditedTasks}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\n\r\nconst sortButtons = ['All', 'Active', 'Completed'];\r\n\r\nconst Footer = ({\r\n  modeHandler,\r\n  showMode,\r\n  items,\r\n  removeTasks,\r\n  isAreAnyCompleted,\r\n}) => {\r\n  const getClassName = buttonName => (\r\n    (buttonName.toLowerCase() === showMode)\r\n      ? 'todo__filter-item selected'\r\n      : 'todo__filter-item'\r\n  );\r\n\r\n  const itemsInfo = ((items === 1) && `${items} item left`) || `${items} items left`;\r\n\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo__count\">{itemsInfo}</span>\r\n      <ul className=\"todo__filters\">\r\n        {sortButtons.map((button, key) => (\r\n          <li\r\n            key={`${button}${key}`}\r\n            className={getClassName(button)}\r\n            onClick={() => modeHandler(button.toLowerCase())}\r\n          >\r\n            {button}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {isAreAnyCompleted\r\n                && <span className=\"clear-button\" onClick={removeTasks}>Clear completed</span>\r\n            }\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport NewToDo from './components/NewToDo';\r\nimport ToDoList from './components/ToDoList';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    tasks: [],\r\n    showMode: '',\r\n    allTasksIsCompleted: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    const appData = localStorage.getItem('appData');\r\n\r\n    if (appData) {\r\n      const { showMode, tasks, allTasksIsCompleted } = JSON.parse(appData);\r\n\r\n      this.setState({ \r\n        tasks,\r\n        showMode,\r\n        allTasksIsCompleted\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        tasks: [],\r\n        showMode: 'all',\r\n        allTasksIsCompleted: false \r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState !== this.state) {\r\n      this.setDataToLocalStorage();\r\n    }\r\n  }\r\n\r\n  setDataToLocalStorage = () => {\r\n    const { tasks, showMode, allTasksIsCompleted } = this.state;\r\n\r\n    const appData = {\r\n      tasks,\r\n      showMode,\r\n      allTasksIsCompleted\r\n    };\r\n\r\n    localStorage.setItem('appData', JSON.stringify(appData));\r\n  };\r\n\r\n  addTask = (task) => {\r\n    const { tasks } = this.state;\r\n    tasks.push(task);\r\n\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  removeTask = (taskId) => {\r\n    const { tasks } = this.state;\r\n    const newTasks = tasks.filter(task => task.id !== taskId);\r\n\r\n\r\n    this.setState({\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  statusHandler = (taskId) => {\r\n    const { tasks } = this.state;\r\n    const newTasks = tasks.map((task) => {\r\n      if (taskId === task.id) {\r\n        task.status = (task.status === 'completed') ? 'active' : 'completed';\r\n      }\r\n      return task;\r\n    });\r\n\r\n    this.setState({\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  modeHandler = showMode => this.setState({ showMode });\r\n\r\n  changeStatusToAllTasks = () => {\r\n    const { tasks, allTasksIsCompleted } = this.state;\r\n    const isActive = tasks.some(task => task.status === 'active');\r\n\r\n    if (isActive) {\r\n      tasks.forEach(task => ((task.status = 'completed'), task));\r\n    } else {\r\n      tasks.forEach(task => ((task.status = 'active'), task));\r\n    }\r\n\r\n    this.setState({ \r\n      tasks,\r\n      allTasksIsCompleted: !allTasksIsCompleted\r\n    });\r\n  }\r\n\r\n  removeTasks = () => {\r\n    const { tasks } = this.state;\r\n    const activeTasks = tasks.filter(task => task.status !== 'completed');\r\n\r\n    this.setState({\r\n      tasks: activeTasks,\r\n    });\r\n  }\r\n\r\n  updateEditedTasks = (newText, id) => {\r\n    const { tasks } = this.state;\r\n    tasks.find(task => task.id === id).text = newText;\r\n\r\n    this.setState({ tasks });\r\n  }\r\n\r\n  getActiveItems = () => {\r\n    const { tasks } = this.state;\r\n    return (tasks.length) ? tasks.filter(task => task.status === 'active') : [];\r\n  };\r\n\r\n  render() {\r\n    const { tasks, showMode, allTasksIsCompleted } = this.state;\r\n    const activeItems = this.getActiveItems();\r\n    const activeItemsCount = activeItems.length;\r\n    const isAreAnyCompleted = tasks.some(task => task.status === 'completed');\r\n    const tasksLength = tasks.length;\r\n\r\n    return (\r\n      <section className=\"todo-app\">\r\n        <Header />\r\n        <section className=\"main\">\r\n          <NewToDo\r\n            addTask={this.addTask}\r\n            tasksLength={tasksLength}\r\n            changeStatusToAllTasks={this.changeStatusToAllTasks}\r\n            allTasksIsCompleted={allTasksIsCompleted}\r\n          />\r\n          {tasks\r\n          && (\r\n          <ToDoList\r\n            tasks={tasks}\r\n            removeTask={this.removeTask}\r\n            statusHandler={this.statusHandler}\r\n            showMode={showMode}\r\n            updateEditedTasks={this.updateEditedTasks}\r\n          />\r\n          )\r\n          }\r\n        </section>\r\n        {(!!activeItemsCount || !!tasksLength)\r\n        && (\r\n        <Footer\r\n          modeHandler={this.modeHandler}\r\n          showMode={showMode}\r\n          items={activeItemsCount}\r\n          removeTasks={this.removeTasks}\r\n          isAreAnyCompleted={isAreAnyCompleted}\r\n        />\r\n        )\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}